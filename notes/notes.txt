尽量使用while 替代 for()

>>>0 作用: 无符号右移   相当于 逻辑右移
1.所有非数值转换成0
2.所有大于等于 0 数取整数部分

>> 0 有符号右移
1. 所有非数值转换成0
2. 数值取整数部分

>>>1
1.非数值转为 0
2.正数时, 相当于 val/2 然后取整数部分
3.负数时, 转为很大的正数


x = 101101
x逻辑右移2位：001011
x算术右移2位：111011


以下三条语句的效率是: x = x + 1 <  x += 1  < x++

call 在大多数情况下比 apply性能好

var _has = {}.hasOwnProperty;
if(_has.call(obj, 'xxx')) //查看某个对象上是否有xxx属性

跳过了 _.findIndex和 _.findLastIndex 
******************看到_.first  方法  2015年10月25日00:44:25

$.type()  jquery 获取数据类型

/============
function(a){}.length   // 1
function(a, b){}.length   // 2
note: 函数的 length 得到的是形参个数
arguments.length   得到实参个数

跳过了 _.intersection

*****************_.pull 方法 2015年10月26日00:19:39
 
*****************_.remove 2015年10月28日00:04:07

*****************_.takeWhile 2015年10月29日00:06:05

*****************_.where 2015年10月31日22:18:45

只有函数被调用时,arguments对象才会被创建,未调用时其值为 null
函数 arguments 保存实参

在一个函数调用另一个函数时,被调用的函数会自动生成一个caller属性,指向调用它的函数对象.
如果该函数当前未被调用,或并非被其他函数调用,则caller为null
function testCaller() {
	var caller = testCaller.caller;
	alert(caller);
}
function aCaller() {
	testCaller();
}
aCaller();
弹窗会弹出 aCaller()函数的源码

当函数被调用时,它的arguments.callee对象就会指向自身,也就是一个对自己的引用. (多用于函数递归)
因为arguments是在函数调用时才有效,因此函数未调用时, arguments.callee为null

/=======================================

window.location 属性:
hash : #号开始的url
host : 主机名和当前url的端口号
hostname :主机名
href: 完整的url
pathname: 当前url的路径部分, / 斜杠部分
port: 端口号
protocol: url协议
search: ?号开始的url

js正则函数详细使用 没理清
页面宽度, div宽度等获取 浏览器差异没理清

=======================================/


*****************_.isArguments 2015年11月02日23:23:16
*****************_.add 2015年11月6日00:08:12

vue.js 笔记

实例属性: http://cn.vuejs.org/api/instance-properties.html
实例方法: http://cn.vuejs.org/api/instance-methods.html
全局api: http://cn.vuejs.org/api/global-api.html
组件选项: http://cn.vuejs.org/api/options.html

注意: 以 _ 或 $ 开头的属性将不会被代理在 Vue 实例上


//============================


vue.js 看到条件渲染  2015年11月6日23:36:56

vue 指令只封装 DOM 操作，而组件代表一个自给自足的独立单元


vue.js 看到过渡  2015年11月8日22:34:47

//=================================
ES5中新增了写数组方法，如下：
forEach (js v1.6)
map (js v1.6)
filter (js v1.6)
some (js v1.6)
every (js v1.6)
indexOf (js v1.6)
lastIndexOf (js v1.6)
reduce (js v1.8)
reduceRight (js v1.8)

url: http://www.zhangxinxu.com/wordpress/2013/04/es5新增数组方法/


看到vue-test4.html结束
vue.js 看到过渡  2015年11月15日23:49:47

有很多函数式库：
underscore.js，
lodash，Fantasy Land, Functional.js,
Bilby.js, fn.js, Wu.js, Lazy.js, Bacon.js,
sloth.js, stream.js, Sugar, Folktale, RxJs

多种javascript变成方式:
命令式编程: 是建立在直接操作和检查程序状态之上.
面向原型的面向对象编程: 利用现有的对象作为原型来生成特定的实例
元编程: 编写代码叫做编程,当你的代码改变了某些代码被解释的方式. call apply时

原生对象({}) / 构造器 (构造函数)
每个对象都有__proto__属性 
原生对象/构造函数实例化的对象

prototype是函数的内置属性，__proto__是对象的内置属性
(方法这个特殊的对象，除了和其他对象一样有__proto__属性之外，
还有自己特有的属性——原型属性（prototype）)

在这里对"prototype"和"proto"进行简单的介绍：
对于所有的对象，都有proto属性，这个属性对应该对象的原型
对于函数对象，除了proto属性之外，还有prototype属性，
当一个函数被用作 构造函数 来创建实例时，
该函数的prototype属性值将被作为原型赋值给所有对象实例
（也就是设置实例的proto属性）,即实例的proto属性指向 构造函数的原型对象


所有的对象都有"proto"属性，该属性对应该对象的原型
所有的函数对象都有"prototype"属性，并且指向该函数对象的原型对象
该属性的值会被赋值给该函数创建的对象的"proto"属性
所有的原型对象都有"constructor"属性，该属性对应创建所有指向该原型的实例的构造函数
函数对象和原型对象通过"prototype"和"constructor"属性进行相互关联


	var Person = function(){};
	var p = new Person();
	new的过程拆分成以下三步：
	(1) var p={}; 也就是说，初始化一个对象p
	(2) p.__proto__ = Person.prototype;
	(3) Person.call(p); 也就是说构造p，也可以称之为初始化p
    1.创建一个空对象并且this变量引用了该对象,同时还继承了该函数的原型.
    2.属性和方法被加入到this引用的对象中.
    3.新创建的对象由this所引用,并且最后隐式的返回this(如果没有显示地返回其他对象)


//===========   vue-test8.html 2015年11月17日00:08:26

//===========   vue-test9.html 2015年11月17日22:47:35

shift() 通常比 pop() 慢得多

slice()对象array中的某一段做浅复制

============= javascript 精粹 81 2015年11月22日23:22:44

闭包: 是一个函数,捕获作用域内的外部绑定。

函数式编程: "使用函数,而不是值"



//=========== javascript模式 P52 2015年11月26日23:20:51
=======
//=========== javascript模式 P19 2015年11月26日23:20:51
使用var创建的全局变量(这类变量在函数外部创建)不能删除.
不适用var创建的隐含全局变量(尽管它是在函数内部创建)可以被删除.
这表明隐含全局变量严格来讲不是真正的变量,而是全局对象的属性,属性是可以通过delete操作符删除,但变量不可以

//=========== javascript模式 P118 (私有静态成员) 2015年12月3日23:22:30

//=========== javascript模式 P148 2015年12月7日17:40:30

//=========== javascript模式 P159 2015年12月8日15:49:01

//=========== javascript模式 2015年12月14日15:26:47  第一遍


//=========== javascript-mode.html  line-368


getBoundingClientRect()来获取页面元素的位置, 注意兼容性


//=========== javascript-mode.html  line-368


 不需要第三个变量的转换2个变量值:
  var a = 10;
    var b = 99;

    a^=b, b^=a, a^=b;
    a //99
    b // 10

    左移0位可用于取整
     13.5 << 0  // 13
     -13.5 << 0 // -13

 右移运算可以模拟2的整除运算：
     5 >> 1     // 相当于 5 / 2 = 2

     21 >> 2     // 相当于 21 / 4 = 5

     21 >> 3    // 相当于 21 / 8 = 2

     21 >> 4    // 相当于 21 / 16 = 1

1////
function add(num){
  num += ~~add;
  add.num = num;
  return add;
}
add.valueOf = add.toString = function(){return add.num};
var ans = add(3)(4)(5)(6);  // 18
alert(ans);

2////
function add(a) {
  var temp = function(b) {
    return add(a + b);
  }
  temp.valueOf = temp.toString = function() {
    return a;
  };
  return temp;
}
var ans = add(2)(3)(4);


lazyLoad
my-class
extnd
TinyDom
delayed
namespacer.js
datediff
cookie.js
https://github.com/jasonmoo/t.js
https://github.com/james2doyle/saltjs/tree/master/js
https://github.com/malko/l.js
https://github.com/jgallen23/cookie-monster
https://github.com/leonidas/transparency
https://github.com/Cedriking/is.js
https://github.com/pvorb/node-clone
http://dkraczkowski.github.io/js.class/

/*------------------------------

var a = 10;
if (a & 1) {  // use this
  // ...
}

if (a % 2) { // not use this
  // ...
}

// use << 1 instead of *2
var a = 10;
var b = a << 1; // use this
var b = a * 2;  // not use this

var a = 10;
var b = a >> 1; // use this
var b = a / 2;  // not use this

-----------------------------------------*/

//函数和对象互为对方实例
console.log(Function instanceof Object);  // true
console.log(Object instanceof Function);  // true

var f = new Function();
var o = new Object();
console.log(f instanceof Function);  //true
console.log(o instanceof Function);  // false
console.log(f instanceof Object);    // true
console.log(o instanceof Object);   // true


2016年4月27日21:44:27 start
meta 用法总结:
http://web.jobbole.com/85860/

前端工具集:
https://github.com/codylindley/frontend-tools

随机获取16进制颜色: (~~(Math.random()*(1<<24))).toString(16)

curl.js


CSS鼠标指针事件pointer-events属性非常的有趣，
它的功效非常像JavaScript，当你把这个属性设置为none时，它能有效的阻止禁止这个元素，你也许会说“这又如何？”，
但事实上，它是禁止了这个元素上的任何JavaScript事件或回调函数！
.disabled { pointer-events: none; }


/*===============================================
    sass
  ===============================================*/

@at-root 跳出当前选择器嵌套
默认@at-root只会跳出选择器嵌套，而不能跳出@media或@support，
如果要跳出这两种，则需使用@at-root (without: media)，@at-root (without: support)
这个语法的关键词有四个：all（表示所有），rule（表示常规css），media（表示media），
support（表示support，因为@support目前还无法广泛使用，所以在此不表）
我们默认的@at-root其实就是@at-root (without:rule)

ex: .parent-3 {
      background:#f00;
      @at-root {
        .child1 {
          width:300px;
        }
        .child2 {
          width:400px;
        }
      }
    }

    ======>

    .parent-3 {
      background: #f00;
    }
    .child1 {
      width: 300px;
    }
    .child2 {
      width: 400px;
    }

    @media print {
      .parent2{
        color:#f00;

        @at-root (without: media) {
          .child2 {
            width:200px;
          }
        }
      }
    }

    ======>

    @media print {
      .parent2 {
        color: #f00;
      }
    }
    .parent2 .child2 {
      width: 200px;
    }
    -----------------------------------------------
    list

    $linkColor: #08c #333 !default;//第一个值为默认值，第二个鼠标滑过值
    a{
      color:nth($linkColor,1);

      &:hover{
        color:nth($linkColor,2);
      }
    }

    ========>

    a{
      color:#08c;
    }
    a:hover{
      color:#333;
    }

    -----------------------------------------------
    @mixin

    @mixin center-block {
        margin-left:auto;
        margin-right:auto;
    }
    .demo{
        @include center-block;
    }

    ============>

    .demo{
        margin-left:auto;
        margin-right:auto;
    }

    带参数:

    @mixin opacity($opacity:50) {
      opacity: $opacity / 100;
      filter: alpha(opacity=$opacity);
    }

    ============>

    .opacity{
      @include opacity; //参数使用默认值
    }
    .opacity-80{
      @include opacity(80); //传递参数
    }

    --------------------------------------------------
    @content
    可以用来解决css3的@media等带来的问题。它可以使@mixin接受一整块样式，接受的样式从@content开始

    @mixin max-screen($res){
      @media only screen and ( max-width: $res ) {
        @content;
      }
    }

    @include max-screen(480px) {
      body { color: red }
    }

    =============>

    @media only screen and (max-width: 480px) {
      body { color: red }
    }

    -------------------------------------------------
    @for

    @for $i from 1 through 3 {
      .item-#{$i} { width: 2em * $i; }
    }

    //css style
    //-------------------------------
    .item-1 {
      width: 2em;
    }
    .item-2 {
      width: 4em;
    }
    .item-3 {
      width: 6em;
    }

    @each

    $headings: (h1: 2em, h2: 1.5em, h3: 1.2em);
    @each $header, $size in $headings {
      #{$header} {
        font-size: $size;
      }
    }


    /*===============================================
        你不知道的javascript 上卷
      ===============================================*/



    如果你想禁止一个对象添加新属性并且保留已有属性，可以使用 Object.preventExtensions(..)

    Object.seal(..) 会创建一个“密封”的对象，
    这个方法实际上会在一个现有对象上调用 Object.preventExtensions(..)
    并把所有现有属性标记为 configurable:false。
    所以，密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性(虽然可以 修改属性的值)。

    Object.freeze(..) 会创建一个冻结对象，这个方法实际上会在一个现有对象上调用
    Object.seal(..) 并把所有“数据访问”属性标记为 writable:false，这样就无法修改它们 的值

    Object.keys(..) 会返回一个数组，包含所有可枚举属性，
    Object.getOwnPropertyNames(..) 会返回一个数组，包含所有属性，无论它们是否可枚举。

    in 和 hasOwnProperty(..) 的区别在于是否查找 [[Prototype]] 链，
    然而，Object.keys(..) 和 Object.getOwnPropertyNames(..) 都只会查找对象直接包含的属性。


    我们来对比一下两种把 Bar.prototype 关联到 Foo.prototype 的方法:
    // ES6 之前需要抛弃默认的 Bar.prototype
         Bar.ptototype = Object.create( Foo.prototype );
    // ES6 开始可以直接修改现有的
    Bar.prototype Object.setPrototypeOf( Bar.prototype, Foo.prototype );

    //在 a 的整 条 [[Prototype]] 链中是否出现过 Foo.prototype
    Foo.prototype.isPrototypeOf( a );

    我们也可以直接获取一个对象的 [[Prototype]] 链。
    在 ES5 中，标准的方法是: Object.getPrototypeOf( a );

    这些特殊的空 [[Prototype]] 对象通常被称作“字典”，
    它们完全不会受到原 型链的干扰，因此非常适合用来存储数据; 例如: Object.create(null)

    if (!Object.create) {
        Object.create = function(o) {
            function F(){}
            F.prototype = o;
            return new F();
        };
    }


    从 ES6 开始，该值定义在 Number.EPSILON 中，我们可以直接拿来用，也可以为 ES6 之前
    的版本写 polyfill:
         if (!Number.EPSILON) {
             Number.EPSILON = Math.pow(2,-52);
         }
    可以使用 Number.EPSILON 来比较两个数字是否相等(在指定的误差范围内):
         function numbersCloseEnoughToEqual(n1,n2) {
             return Math.abs( n1 - n2 ) < Number.EPSILON;
         }
         var a = 0.1 + 0.2;
         var b = 0.3;
         numbersCloseEnoughToEqual( a, b );     // true
         numbersCloseEnoughToEqual( 0.0000001, 0.0000002 );  // false


    要检测一个值是否是整数，可以使用 ES6 中的 Number.isInteger(..) 方法:
     if (!Number.isInteger) {
              Number.isInteger = function(num) {
                  return typeof num == "number" && num % 1 == 0;
              };
     }

     要检测一个值是否是安全的整数，可以使用 ES6 中的 Number.isSafeInteger(..) 方法:
     Number.isSafeInteger( Number.MAX_SAFE_INTEGER ); // true
     Number.isSafeInteger( Math.pow( 2, 53 ) ); // false
     Number.isSafeInteger( Math.pow( 2, 53 ) - 1 ); // true



     可以为 ES6 之前的版本 polyfill Number.isSafeInteger(..) 方法:
          if (!Number.isSafeInteger) {
              Number.isSafeInteger = function(num) {
                  return Number.isInteger( num ) &&
                      Math.abs( num ) <= Number.MAX_SAFE_INTEGER;
     }; }


    从 ES6 开始我们可以使用工具函数 Number.isNaN(..)。ES6 之前的浏览器的 polyfill 如下:
         if (!Number.isNaN) {
             Number.isNaN = function(n) {
                 return (
                     typeof n === "number" &&
                     window.isNaN( n )
                );
             };
        }

        if (!Number.isNaN) {
                 Number.isNaN = function(n) {
                     return n !== n;
                 };
        }


    function isNegZero(n) {
             n = Number( n );
             return (n === 0) && (1 / n === -Infinity);
         }
    isNegZero( -0 );
    isNegZero( 0 / -3 );
    isNegZero( 0 );
    // true
    // true
    // false


    // ES6 中新加入了一个工具方法 Object.is(..) 来判断两个值是否绝对相等
     if (!Object.is) {
         Object.is = function(v1, v2) {
            // 判断是否是-0
            if (v1 === 0 && v2 === 0) {
                 return 1 / v1 === 1 / v2;
            }
            // 判断是否是NaN
            if (v1 !== v1) {
                  return v2 !== v2;
              }
            // 其他情况
                  return v1 === v2;
              };
        }


        if (!Date.now) {
                 Date.now = function(){
                     return (new Date()).getTime();
                 };
        }


        var o = { };
        var a = {
                b: 42,
                c: o,
                 d: function(){}
             };
         // 自定义的JSON序列化
         a.toJSON = function() {
            // 序列化仅包含b
              return { b: this.b };
          };
          JSON.stringify( a ); // "{"b":42}"

         var a = {
          b: 42,
          c: "42",
          d: [1,2,3]
          };
       JSON.stringify( a, ["b","c"] ); // "{"b":42,"c":"42"}"

       JSON.stringify( a, function(k,v){
           if (k !== "c") return v;
       } ); // "{"b":42,"d":[1,2,3]}"

       (1) 字符串、数字、布尔值和 null 的 JSON.stringify(..) 规则与 ToString 基本相同。
       (2) 如果传递给 JSON.stringify(..) 的对象中定义了 toJSON() 方法，那么该方法会在字符
       串化前调用，以便将对象转换为安全的 JSON 值。

       // 当前页面是否可视
       $(document).bind("visibilitychange", function(){
       })



       // touchStart 
       e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;



       /*----------创建模拟时间和自定义时间*/

       MouseEvent:

       var btn = document.querySelector('.button');
      btn.addEventListener('click', function (event) {
          console.log('OH~!You clicked me~!');
      }, false);
      var ev = new MouseEvent('click', {
          cancelable: true,
          bubble: true,
          view: window
      });
      btn.dispatchEvent(ev);


      KeyboardEvent: 

      var btn = document.querySelector('.button');
     document.addEventListener('keyup', function (event) {
         console.log(String.fromCharCode(event.keyCode));
     }, false);
     var ev = new KeyboardEvent('keyup', {
         keyCode: 65
     });
     document.dispatchEvent(ev);


     自定义事件有两种方法,一种是使用new Event(),另一种是new customEvent()

     var btn = document.querySelector('.button');
      var ev = new Event('test', {
          bubbles: 'true',
          cancelable: 'true'
      });
      btn.addEventListener('test', function (event) {
          console.log(event.bubbles);
          console.log(event.cancelable);
          console.log(event.detail);
      }, false);
      btn.dispatchEvent(ev);


      var btn = document.querySelector('.button');

      var ev = new CustomEvent('test', {
          bubbles: 'true',
          cancelable: 'true',
          detail: 'tcstory'
      });
      btn.addEventListener('test', function (event) {
          console.log(event.bubbles);
          console.log(event.cancelable);
          console.log(event.detail);
      }, false);
      btn.dispatchEvent(ev);